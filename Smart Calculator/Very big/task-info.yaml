type: edu
custom_name: stage8
files:
- name: test/Test.java
  visible: true
  text: |
    import calculator.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.SimpleTestCase;

    import java.util.List;

    public class Test extends StageTest {

        public Test() {
            super(Main.class);
        }

        @Override
        public List<SimpleTestCase> generate() {
            return List.of(
                    /* Check expressions with variables */
                    new SimpleTestCase(
                            "a = 4\nb = 5\nc = 6\na*2+b*3+c*(2+3)\n/exit",
                            "53\nBye!"
                    ),
                    /* Check reassignment */
                    new SimpleTestCase(
                            "a = 1\na = 2\na = 3\na\n/exit",
                            "3\nBye!"
                    ),
                    /* Check handling unknown commands */
                    new SimpleTestCase(
                            "/command\n/exit",
                            "Unknown command\nBye!"
                    ),
                    /* Check all operations */
                    new SimpleTestCase(
                            "3 + 8 * ((4 + 3) * 2 + 1) - 6 / (2 + 1)\n/exit",
                            "121\nBye!"
                    ),
                    /* Check with an invalid expressions */
                    new SimpleTestCase(
                            "8 * 3 + 12 * (4 - 2)\n4 * (2 + 3\n4 + 3)\n/exit",
                            "48\nInvalid expression\nInvalid expression\nBye!"
                    ),
                    /* Check expressions with large numbers */
                    new SimpleTestCase(
                            "112234567890 + 112234567890 * (10000000999 - 999)\n/exit",
                            "1122345679012234567890\nBye!"
                    ),
                    /* Check expressions with large numbers and variables */
                    new SimpleTestCase(
                            "a = 800000000000000000000000\nb = 100000000000000000000000\na + b\n/exit",
                            "900000000000000000000000\nBye!"
                    ),
                    /* Check reassignment with large numbers */
                    new SimpleTestCase(
                            "n = 3\nn = 500000000000\nn = 20000000000000000000000\nn\n/exit",
                            "20000000000000000000000\nBye!"
                    )
            );
        }
    }
  learner_created: false
- name: src/calculator/ErrorParser.java
  visible: true
  learner_created: true
- name: src/calculator/Translator.java
  visible: true
  text: |
    package calculator;

    public class Translator {
        private String infix;
        private String postfix;

        public Translator(String infix) {
            this.infix = infix;
            postfix = translate();
        }

        private String translate() {
            return infix;
        }

        public String getPostfix() {
            return postfix;
        }
    }
  learner_created: true
- name: src/calculator/Calculator.java
  visible: true
  text: |
    package calculator;

    import java.util.HashMap;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    // all expressions 3 + 8 * ((4 + 3) * 2 + 1) - 6 / (2 + 1) = 121

    public class Calculator {

        static HashMap<String, Integer> variables;

        public Calculator() {
            variables = new HashMap<>();
        }

        public void calculate(String input) {
            String simplified = simplifyOperators(input);
            if (checkError(simplified)) {
                return;
            } else if (checkVariables(simplified)) {
                return;
            }

            int added = addition(simplified);
            System.out.println(added);
        }

        private boolean checkError(String input) {
            if (input.length() == 0) {
                return true;
            }

            Pattern command = Pattern.compile("/");
            Matcher commandMatcher = command.matcher(input);
            if (commandMatcher.find()) {
                handleArgs(input);
                return true;
            }

            String errorRegex = "(\\+$|\\d\\s+\\d|-$)";
            Pattern pattern = Pattern.compile(errorRegex);
            Matcher matcher = pattern.matcher(input);
            if (matcher.find()) {
                System.out.println("Invalid expression");
                return true;
            }

            return false;
        }

        private String simplifyOperators(String input) {
            String spaceless = input.replaceAll("\\s+", "");
            String singleOperators = spaceless.replaceAll("(\\+\\++|--)", "+");
            String original = "";
            while (!singleOperators.equals(original)) {
                original = singleOperators;
                singleOperators = singleOperators.replaceAll("(\\+\\++|--)", "+");
                singleOperators = singleOperators.replaceAll("(\\+-|-\\+)", "-");
            }
            return singleOperators;
        }

        private void handleArgs(String input) {
            if ("/help".equals(input)) {
                System.out.println("The program calculates the sum or difference of numbers");
            } else {
                System.out.println("Unknown command");
            }
        }

        private int addition(String input) {
            String[] additionSplit = input.split("\\+");
            int[] toAdd = new int[additionSplit.length];
            for (int i = 0; i < additionSplit.length; i++) {
                try {
                    toAdd[i] = Integer.parseInt(additionSplit[i]);
                } catch(Exception e) {
                    if (additionSplit[i].length() > 0) {
                        toAdd[i] = subtraction(additionSplit[i]);
                    } else {
                        toAdd[i] = 0;
                    }
                }
            }
            int sum = 0;
            for (int num : toAdd) {
                sum += num;
            }
            return sum;
        }

        private int subtraction(String input) {
            boolean hasNegative;
            try {
                hasNegative = "-".equals(input.charAt(0));
            } catch (StringIndexOutOfBoundsException e) {
                return 0;
            }

            String[] subtractionSplit = input.split("-");
            int[] toSubtract = new int[subtractionSplit.length];
            for (int i = 0; i < subtractionSplit.length; i++) {
                try {
                    toSubtract[i] = Integer.parseInt(subtractionSplit[i]);
                } catch(Exception e) {
                    System.out.println("Error subtraction failed with: " + subtractionSplit[i]);
                }
            }
            int difference = hasNegative ? -toSubtract[0] : toSubtract[0];
            for (int i = 1; i < toSubtract.length; i++) {
                difference -= toSubtract[i];
            }
            return difference;
        }

        private boolean checkVariables(String input) {
            if (input.contains("=")) {
                if (checkVariableErrors(input)) {
                    return true;
                }

                // try assigning and if it fails, check to see if value wasn't given
                // or if it is being assigned to a variable. If the variable isn't
                // found, then the assignment isn't valid, otherwise set the value
                // of the new variable to the value found at the other one
                String[] assignment = input.split("=");
                try {
                    variables.put(assignment[0], Integer.parseInt(assignment[1]));
                    return true;
                } catch (IndexOutOfBoundsException e) {
                    System.out.println("Invalid assignment");
                    return true;
                } catch(Exception e) {
                    Integer setter = variables.get(assignment[1]);

                    if (setter == null) {
                        System.out.println("Unknown variable");
                        return true;
                    }

                    variables.put(assignment[0], setter);
                    return true;
                }
            }
            Pattern variableDetection = Pattern.compile("([a-z]|[A-Z])");
            Matcher matcher = variableDetection.matcher(input);
            if (matcher.find()) {
                Integer retrieved = variables.get(input);
                if (retrieved == null) {
                    System.out.println("Unknown variable");
                    return true;
                }
                System.out.println(retrieved);
                return true;
            }
            return false;
        }

        private boolean checkVariableErrors(String input) {
            // check for numbers in the variable you are creating
            String regex = "\\d.*=";
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(input);
            if (matcher.find()) {
                System.out.println("Invalid identifier");
                return true;
            }

            // check for multiple equal signs
            regex = "=.*=";
            pattern = Pattern.compile(regex);
            matcher = pattern.matcher(input);
            if (matcher.find()) {
                System.out.println("Invalid assignment");
                return true;
            }
            return false;
        }
    }
  learner_created: true
- name: src/calculator/VariableSetter.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/42/stages/227/implement
status: Failed
record: -1
