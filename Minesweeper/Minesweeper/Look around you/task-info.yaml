type: edu
custom_name: stage3
files:
- name: test/MinesweeperTest.java
  visible: false
  text: |
    import minesweeper.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.*;
    import java.util.stream.Collectors;

    public class MinesweeperTest extends StageTest<Integer> {
        @Override
        public List<TestCase<Integer>> generate() {
            List<TestCase<Integer>> tests = new ArrayList<>();
            for (int i = 1; i <= 50; i++) {
                int mines = i;
                TestCase<Integer> test = new TestCase<Integer>()
                    .setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);
                        main.start();
                        String output = main.execute("" + mines);
                        return test(output, mines);
                    });
                tests.add(test);
                tests.add(test);
            }
            return tests;
        }

        public CheckResult test(String reply, Integer attach) {
            List<String> lines =
                Arrays.stream(reply.split("\n"))
                    .map(String::trim)
                    .collect(Collectors.toList());

            if (lines.isEmpty()) {
                return CheckResult.wrong(
                    "Looks like you didn't output a single line!"
                );
            }

            if (lines.size() != 9) {
                return CheckResult.wrong(
                    "You should output exactly 9 lines of the field. Found: " + lines.size() + "."
                );
            }

            int mines = 0;

            for (String line : lines) {
                if (line.length() != 9) {
                    return CheckResult.wrong(
                        "One of the lines of the field doesn't have 9 symbols, " +
                            "but has " + line.length() + ".\n" +
                            "This line is \"" + line + "\""
                    );
                }

                for (char c : line.toCharArray()) {
                    if (c != 'X' && c != '.' && !(c >= '0' && c <= '9')) {
                        return CheckResult.wrong(
                            "One of the characters is not equal to 'X' or '.' or to a number.\n" +
                                "In this line: \"" + line + "\"."
                        );
                    }
                    if (c == 'X') {
                        mines++;
                    }
                }
            }

            if (attach != mines) {
                return CheckResult.wrong(
                    "Expected to see " + attach + " mines, found " + mines
                );
            }

            int[] around = new int[] {-1, 0, 1};

            for (int y = 0; y < lines.size(); y++) {
                String line = lines.get(y);
                for (int x = 0; x < line.length(); x++) {
                    char c = line.charAt(x);

                    if (c == 'X') {
                        continue;
                    }

                    int minesAround = 0;

                    for (int dx : around) {
                        for (int dy : around) {

                            int newX = x + dx;
                            int newY = y + dy;

                            if (0 <= newX && newX < 9 &&
                                0 <= newY && newY < 9) {

                                char newC = lines.get(newY).charAt(newX);

                                if (newC == 'X') {
                                    minesAround++;
                                }
                            }
                        }
                    }

                    if (minesAround == 0 && c != '.') {
                        return CheckResult.wrong(
                            "There are no mines around, but found number " + c + ".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                    if (minesAround != 0 && c != '0' + minesAround) {
                        return CheckResult.wrong(
                            "In this cell should be number " + minesAround + ", " +
                                "but found symbol \"" + c + "\".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/minesweeper/Main.java
  visible: true
  text: |
    package minesweeper;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            System.out.println("How many mines do you want on the field?");
            Scanner scanner = new Scanner(System.in);
            Field field = new Field(scanner.nextInt());
            field.print();
        }
    }
  learner_created: true
- name: src/minesweeper/Field.java
  visible: true
  text: |
    package minesweeper;

    import java.util.ArrayList;
    import java.util.Random;

    public class Field {
        private ArrayList<ArrayList<Boolean>> field;
        int size = 9;

        public Field(int mines) {
            field = new ArrayList<>();
            for (int row = 0; row < size; row++) {
                ArrayList<Boolean> line = new ArrayList<>();
                for (int column = 0; column < size; column++) {
                    line.add(false);
                }
                field.add(line);
            }

            Random random = new Random();
            for (int i = 0; i < mines; i++) {
                int row = (int) (random.nextDouble() * size);
                int column = (int) (random.nextDouble() * size);
                ArrayList<Boolean> line = field.get(row);

                if (line.get(column)) {
                    i--;
                    continue;
                }

                line.set(column, true);
                field.set(row, line);
            }
        }

        public void print() {
            for (int row = 0; row < field.size(); row++) {
                for (int column = 0; column < field.get(row).size(); column++) {
                    System.out.print(field.get(row).get(column) ? "X" : ".");
                }
                System.out.println();
            }
        }
    }
  learner_created: true
- name: src/minesweeper/MineCountField.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/77/stages/428/implement
status: Solved
record: -1
