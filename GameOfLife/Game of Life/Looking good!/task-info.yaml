type: edu
custom_name: stage4
files:
- name: test/GameOfLifeTest.java
  visible: false
  text: |2

    import common.GameOfLifeStage4Test;

    public class GameOfLifeTest extends GameOfLifeStage4Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun fail(message: String) = CheckResult(false, message)
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createPredefinedFeedbackTest(
            feedback: String,
            input: String = "",
            checker: (String) -> Boolean
    ): TestCase<ClueWithChecker> {
        return ClueWithPredefinedFeedbackChecker(
                predefinedFeedback = feedback,
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeCommonTest.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult

    fun checkLabelForInteger(labelRequirements: ComponentRequirements<JLabelFixture>): CheckResult {
        val label = labelRequirements.requireExistingComponent()

        val labelDigits = label.text().trim { !it.isDigit() }

        if (labelDigits.toIntOrNull() == null) {
            return fail("The '${labelRequirements.name}' label doesn't contain an integer.")
        }

        return CheckResult.TRUE
    }
  learner_created: false
- name: test/common/GameOfLifeStage4Test.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.GameOfLife

    abstract class GameOfLifeStage4Test : SwingTest<ClueWithChecker>(GameOfLife()) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            val generationLabel = ComponentRequirements("GenerationLabel", isEnabled = true) { window.label(it) }
            val aliveLabel = ComponentRequirements("AliveLabel", isEnabled = true) { window.label(it) }

            return frameTests(::frame) +
                    existenceTests(generationLabel, aliveLabel) +
                    componentsAreEnabledTests(generationLabel, aliveLabel) +
                    stage4Tests(
                            generationLabelRequirements = generationLabel,
                            aliveLabelRequirements = aliveLabel
                    )
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }
    }

    fun stage4Tests(
            generationLabelRequirements: ComponentRequirements<JLabelFixture>,
            aliveLabelRequirements: ComponentRequirements<JLabelFixture>
    ): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest {
                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }
  learner_created: false
- name: test/common/UiTestsGenerators.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<ClueWithChecker>> {
        return listOf(
                createPredefinedFeedbackTest("Window is not visible") { frameGetter().isVisible }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
            val name: String,
            val isEnabled: Boolean,
            private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            return createPredefinedFeedbackTest("No suitable component with name '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            val (desiredState, stateChecker) = if (requirements.isEnabled) {
                "enabled" to { requirements.requireExistingComponent().isEnabled }
            } else {
                "disabled" to { !requirements.requireExistingComponent().isEnabled }
            }

            return createPredefinedFeedbackTest("The '${requirements.name}' component should be $desiredState") {
                stateChecker()
            }

        }

        return components.map(::generateIsEnabledTest)
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>>
            ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }
  learner_created: false
- name: src/life/Universe.java
  visible: true
  text: |
    package life;

    import java.io.IOException;
    import java.util.Random;

    public class Universe {
        private final int size;
        private final int seed;

        Generation currentGeneration;

        public Universe(int size, int seed) {
            this.size = size;
            this.seed = seed;
        }

        public void generateNew() {
            Random random = new Random();

            boolean[][] map = new boolean[size][size];
            for (int r = 0; r < size; r++) {
                for (int c = 0; c < size; c++) {
                    map[r][c] = random.nextBoolean();
                }
            }
            currentGeneration = new Generation(map);
        }

        public void advanceGeneration() {
            currentGeneration = currentGeneration.getNextGeneration();
        }

        public void runUniverse(int generations) {
            generations = 10;
            Thread universeThread = new Thread();

            for (int i = 1; i <= generations; i++) {
                // clears console output
                try {
                    if (System.getProperty("os.name").contains("Windows")) {
                        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
                    } else {
                        Runtime.getRuntime().exec("clear");
                    }
                } catch (IOException | InterruptedException e) {
                }

                System.out.println("Generation: #" + i);
                System.out.println("Alive: " + currentGeneration.getAlive());

                //prints generation
                currentGeneration.print();

                advanceGeneration();
                try {
                    universeThread.sleep(1000L);
    //                synchronized (universeThread) {
    //                    universeThread.wait(1000L);
    //                }
                } catch(InterruptedException e) {
                   System.out.println("Universe Interrupted");
                   return;
                }
            }
        }
    }
  learner_created: true
- name: src/life/Generation.java
  visible: true
  text: |
    package life;

    import javafx.geometry.Point2D;

    public class Generation {
        private boolean[][] map;

        public Generation(boolean[][] map) {
            this.map = map.clone();
        }

        public void print() {
            for (int r = 0; r < map.length; r++) {
                for (int c = 0; c < map.length; c++) {
                    System.out.print(map[r][c] ? "O" : " ");
                }
                System.out.println();
            }
        }

        public int getAlive() {
            int alive = 0;
            for (int r = 0; r < map.length; r++) {
                for (int c = 0; c < map.length; c++) {
                   if (map[r][c]) {
                       alive++;
                   }
                }
            }
            return alive;
        }

        public Generation getNextGeneration() {
            boolean[][] next = new boolean[map.length][map.length];

            for (int r = 0; r < map.length; r++) {
                for (int c = 0; c < map.length; c++) {
                   Point2D cell = new Point2D(r, c);
                   if (map[r][c] && willCellSurvive(cell)) {
                       next[r][c] = true;
                   } else if (map[r][c]) {
                       next[r][c] = false;
                   } else if (willCellRevive(cell)) {
                       next[r][c] = true;
                   }
                }
            }

            return new Generation(next);
        }

        private boolean willCellRevive(Point2D cell) {
            if (getNeighbors(cell) == 3) {
                return true;
            }
            return false;
        }

        private boolean willCellSurvive(Point2D cell) {
            if (getNeighbors(cell) == 2 || getNeighbors(cell) == 3) {
                return true;
            }
            return false;
        }

        private int getNeighbors(Point2D cell) {
            int neighbors = 0;

            for (int l = -1; l <= 1; l++) {
                for (int u = -1; u <= 1; u++) {
                    if (l == 0 && u == 0) {
                        continue;
                    }
                    int r = getWrapAround((int) cell.getX(), l);
                    int c = getWrapAround((int) cell.getY(), u);
                    neighbors += map[r][c] ? 1 : 0;
                }
            }
            return neighbors;
        }

        private int getWrapAround(int cell, int offset) {
            if (cell + offset >= map.length) {
                return cell + offset - map.length;
            } else if (cell + offset < 0) {
                return cell + offset + map.length;
            }
            return cell + offset;
        }
    }
  learner_created: true
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            int size = scanner.nextInt();
            int seed = scanner.nextInt();
            int generations = scanner.nextInt();

            Universe universe = new Universe(size, seed);
            universe.generateNew();
            universe.runUniverse(generations);
        }


    }
  learner_created: true
- name: src/life/GameOfLife.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/298/implement
status: Failed
record: -1
