type: edu
custom_name: stage4
files:
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello world!");
        }
    }
  learner_created: false
- name: test/ConverterTest.java
  visible: false
  text: |
    import converter.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;

    class Clue {

        final String input;
        final String answer;
        final boolean provideAnswer;

        Clue(final String input, final String answer, final boolean provideAnswer) {
            this.input = input;
            this.answer = answer;
            this.provideAnswer = provideAnswer;
        }

        Clue(final String input, final String answer) {
            this(input, answer, false);
        }

        Clue(final String input) {
            this(input, null, false);
        }
    }


    public class ConverterTest extends StageTest<Clue> {

        public ConverterTest() {
            super(Main.class);
        }

        static TestCase<Clue> testToAnswer(final String input, final String answer, final boolean provideAnswer) {
            return new TestCase<Clue>()
                .setAttach(new Clue(input, answer, provideAnswer))
                .setInput(input);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                /* Tests with a hint: */
                testToAnswer("10\n11\n2\n", "1011", true),
                testToAnswer("1\n11111\n10\n", "5", true),
                testToAnswer("10\n1000\n36\n", "rs", true),
                testToAnswer("21\n4242\n6\n", "451552", true),
                testToAnswer("7\n12\n11\n", "9", true),
                testToAnswer("5\n300\n10\n", "75", true),
                testToAnswer("1\n11111\n5\n", "10", true),
                testToAnswer("10\n4\n1\n", "1111", true),

                /* Tests without a hint: */
                testToAnswer("10\n12\n2\n", "1100", false),
                testToAnswer("1\n1111111\n10\n", "7", false),
                testToAnswer("10\n1001\n36\n", "rt", false),
                testToAnswer("21\n4243\n6\n", "451553", false),
                testToAnswer("7\n13\n11\n", "a", false),
                testToAnswer("5\n301\n10\n", "76", false),
                testToAnswer("1\n111111\n5\n", "11", false),
                testToAnswer("10\n5\n1\n", "11111", false)
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            final String[] lines = reply
                .lines()
                .filter(line -> !line.isEmpty())
                .toArray(String[]::new);

            if (lines.length == 0) {
                return new CheckResult(
                    false,
                    "Your program doesn't print any line."
                );
            }

            final String answer = lines[lines.length - 1];

            if (!answer.equals(clue.answer)) {
                if (clue.provideAnswer) {
                    return new CheckResult(
                        false,
                        "Your answer is wrong.\n" +
                            "This is a sample test so we give you a hint.\n" +
                            "Input: " + clue.input + "\n" +
                            "Your answer: " + answer + "\n" +
                            "Correct answer: " + clue.answer
                    );
                } else {
                    return new CheckResult(
                        false,
                        "Your answer is wrong."
                    );
                }
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/converter/Octal.java
  visible: true
  text: |
    package converter;

    import java.util.ArrayList;
    import java.util.Collections;

    public class Octal extends NumeralSystem {
        public Octal(String number) {
            super (number);
        }

        public Octal(NumeralSystem system) {
            super(system.number);
        }

        @Override
        protected int toDecimal(String number) {
            number = number.substring(1);
            int decimal = 0;
            while (number.length() > 0) {
                int digit = Integer.parseInt(number.charAt(0) + "");
                decimal += digit * Math.pow(8, number.length() - 1);
                number = number.substring(1);
            }
            return decimal;
        }

        @Override
        public String toString() {
            ArrayList<Integer> remainders = new ArrayList<>();
            int nextNumber = number;
            while (nextNumber >= 1) {
                remainders.add((int) (((nextNumber / 8.0) - (nextNumber / 8)) * 8));
                nextNumber /= 8;
            }
            Collections.reverse(remainders);

            StringBuilder octal = new StringBuilder();
            octal.append("0");
            if (remainders.size() == 0) {
                octal.append("0");
            }
            for (int num : remainders) {
                octal.append(num);
            }
            return octal.toString();
        }
    }
  learner_created: true
- name: src/converter/Converter.java
  visible: true
  text: |
    package converter;

    public class Converter {
        public enum NumberType { BINARY, DECIMAL, OCTAL, HEXADECIMAL }

        private Converter() {}

        public static NumeralSystem convert(NumberType type, NumeralSystem number) {
            switch(type) {
                case BINARY:
                    return new Binary(number);
                case DECIMAL:
                    return new Decimal(number);
                case OCTAL:
                    return new Octal(number);
                case HEXADECIMAL:
                    return new Hexadecimal(number);
            }
            return null;
        }

        public static NumeralSystem convert(int radix, NumeralSystem number) {
            switch(radix) {
                case 2:
                    return convert(NumberType.BINARY, number);
                case 8:
                    return convert(NumberType.OCTAL, number);
                case 10:
                    return convert(NumberType.DECIMAL, number);
                case 16:
                    return convert(NumberType.HEXADECIMAL, number);
            }
            return null;
        }
    }
  learner_created: true
- name: src/converter/NumeralSystem.java
  visible: true
  text: |
    package converter;

    public abstract class NumeralSystem {
        protected int number;

        public NumeralSystem(String number) {
            this.number = toDecimal(number);
        }

        public NumeralSystem(int number) {
            this.number = number;
        }

        protected abstract int toDecimal(String number);

        @Override
        public abstract String toString();
    }
  learner_created: true
- name: src/converter/Binary.java
  visible: true
  text: |
    package converter;

    import java.util.ArrayList;
    import java.util.Collections;

    public class Binary extends NumeralSystem {
        public Binary(String number) {
            super(number);
        }

        public Binary(NumeralSystem system) {
            super(system.number);
        }

        @Override
        protected int toDecimal(String number) {
            number = number.substring(2);
            int decimal = 0;
            while (number.length() > 0) {
                int bit = Integer.parseInt(number.charAt(0) + "");
                decimal += bit * Math.pow(2, number.length() - 1);
                number = number.substring(1);
            }
            return decimal;
        }

        @Override
        public String toString() {
            ArrayList<Integer> remainders = new ArrayList<>();
            int nextNumber = number;
            while (nextNumber >= 1) {
                if (nextNumber % 2 == 0) {
                    remainders.add(0);
                } else {
                    remainders.add(1);
                }
                nextNumber /= 2;
            }
            Collections.reverse(remainders);

            StringBuilder binary = new StringBuilder();
            binary.append("0b");
            if (remainders.size() == 0) {
                binary.append("0");
            }
            for (int num : remainders) {
                binary.append(num);
            }
            return binary.toString();
        }
    }
  learner_created: true
- name: src/converter/Decimal.java
  visible: true
  text: |
    package converter;

    public class Decimal extends NumeralSystem{
        public Decimal(int number) {
            super(number);
        }

        public Decimal(NumeralSystem system) {
            super(system.number);
        }

        @Override
        protected int toDecimal(String number) {
            return Integer.parseInt(number);
        }

        @Override
        public String toString() {
            return number + "";
        }
    }
  learner_created: true
- name: src/converter/Hexadecimal.java
  visible: true
  text: |
    package converter;

    import java.util.ArrayList;
    import java.util.Collections;

    public class Hexadecimal extends NumeralSystem{
        public Hexadecimal(String number) {
            super (number);
        }

        public Hexadecimal(NumeralSystem system) {
            super(system.number);
        }

        @Override
        protected int toDecimal(String number) {
            number = number.substring(2);
            int decimal = 0;
            while (number.length() > 0) {
                int digit = hexDigitToDecimal(number.charAt(0));
                decimal += digit * Math.pow(16, number.length() - 1);
                number = number.substring(1);
            }
            return decimal;
        }

        private int hexDigitToDecimal(char digit) {
            switch(Character.toLowerCase(digit)) {
                case 'a': return 10;
                case 'b': return 11;
                case 'c': return 12;
                case 'd': return 13;
                case 'e': return 14;
                case 'f': return 15;
                default:
                    return Integer.parseInt(digit + "");
            }
        }

        @Override
        public String toString() {
            ArrayList<Integer> remainders = new ArrayList<>();
            int nextNumber = number;
            while (nextNumber >= 1) {
                remainders.add((int) (((nextNumber / 16.0) - (nextNumber / 16)) * 16));
                nextNumber /= 16;
            }
            Collections.reverse(remainders);

            StringBuilder hex = new StringBuilder();
            hex.append("0x");
            if (remainders.size() == 0) {
                hex.append("0");
            }
            for (int num : remainders) {
                hex.append(decimalDigitToHex(num));
            }
            return hex.toString();
        }

        private String decimalDigitToHex(int digit) {
            switch (digit) {
                case 10: return "a";
                case 11: return "b";
                case 12: return "c";
                case 13: return "d";
                case 14: return "e";
                case 15: return "f";
                default: return digit + "";
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/41/stages/217/implement
status: Unchecked
record: -1
